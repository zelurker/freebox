#!/bin/bash

# lance le 1er process mplayer et dumpe le flux sur disque
# Tache de toujours réussir, retourne à d'anciennes valeurs connues si tout
# foire

if ! [ -d livetv ]; then
	mkdir livetv
fi
find livetv/ -mtime +1 -delete

function fallback
{
	serv=`head -n 3 current|tail -n 1`
	flav=`head -n 4 current|tail -n 1`
	audio=`head -n 5 current|tail -n 1`
	video=`head -n 6 current|tail -n 1`
	src=`head -n 2 current|tail -n 1`
	if [ "$audio" == "0" ]; then
		audio=""
	fi
	if [ "$video" == "0" ]; then
		video=""
	fi
	if [ "$service" == "$serv" ] && [ "$flavour" == "$flav" ]; then
		service=201
		flavour=sd
		chaine="France 2"
	else
		service=$serv
		flavour=$flav
		chaine=`head -n 1 current|tail -n 1`
		name=`head -n 7 current|tail -n 1`
	fi
}

function change_flav
{
	if [ "$tried" == "" ] && [ "$flavour" != "" ]; then
		tried=flavour
		if [ "$flavour" == "sd" ]; then
			flavour=ld
		elif [ "$flavour" == "ld" ] || [ "$flavour" == "hd" ]; then
			flavour=sd
		fi
	else
		fallback
	fi
}

service=$1
flavour=$2
audio=$3
video=$4
src=$5
chaine=$6
if [ "$src" == "0" ] || [ "$src" == "" ]; then
	src=freeboxtv
fi
if [ "$audio" == "0" ]; then
	audio=""
fi
if [ "$video" == "0" ]; then
	video=""
fi
echo run_mp1: src=$src video=$video audio=$audio flavour=$flavour service=$service chaine=$chaine
if [ "$src" == "flux" ]; then
	exit 0
fi
if [ -f player1.pid ] && ps -p `cat player1.pid` >& /dev/null; then
	echo run_mp1: kill player1 `cat player1.pid`
	kill `cat player1.pid` && rm -f player1.pid
fi
ok=0
while [ "$ok" == "0" ]; do
	if [ "$audio" != "" ]; then
		audio2="-aid $audio"
	fi
    # echo run_mp1: service $service flavour $flavour
	if [ "$chaine" == "" ]; then
	    echo attente fifo_list
		while ! [ -p fifo_list ]; do
		    sleep 1
		done
		echo fifo_list ok
		if [ "$src" == "dvb" ]; then
			chaine=`echo name $service |socat stdio unix:/home/manu/free/sock_list`
		else
			chaine=`echo name "$service" $flavour $audio |socat stdio unix:/home/manu/free/sock_list`
		fi
	fi
	chaine2=`echo $chaine|sed 's/\//_/g'`
	name=livetv/`date +"%Y%m%d %H%M%S $chaine2.ts"`
	echo sanity check $src...
	case $src in
		dvb)
			echo lancement mplayer -quiet -dumpfile "$name" -dumpstream dvb://"$service"
			mplayer -quiet -dumpfile "$name" -dumpstream dvb://"$service" >& /dev/null &
			;;
		freebox|freeboxtv|"radios freebox")
			# On met -c 2 parce que j'ai une ligne trop pourrie en ce moment
		    if ! ping -q -W 1 -c 2 194.2.0.20 >& /dev/null; then
				echo pas de réseau, pas de freebox
				rm current
				exit 1
		    fi

			if ! ping -q -c 1 mafreebox.freebox.fr > /dev/null; then
			    echo pas de freebox, devrait changer de source ici
			    exit 1
			fi

			echo lancement mplayer $audio2 -dumpfile "$name" -quiet -dumpstream "rtsp://mafreebox.freebox.fr/fbxtv_pub/stream?namespace=1&service=$service&flavour=$flavour"
			mplayer $audio2 -dumpfile "$name" -quiet -dumpstream "rtsp://mafreebox.freebox.fr/fbxtv_pub/stream?namespace=1&service=$service&flavour=$flavour" >& /dev/null &
			;;
		flux)
			mplayer -quiet -dumpfile "$name" -dumpstream "$service" >& /dev/null &
			;;
		*)
			echo source $src pas prévue pour run_mp1, on sort
			exit 0
	esac
	pid=$!
	start=`date +%s`
	echo run_mp1: création player1.pid: $pid
	echo $pid > player1.pid
	tries=0
	# Laisse au moins 3s au flux pour commencer à arriver
	while [ $tries -lt 10 ] && ! [ -f "$name" ] && ps -p $pid >& /dev/null; do
		sleep 0.5
		tries=$(( $tries+1 ))
	done
	echo run_mp1: fin attente fichier tries=$tries
	tries=0
	while [ `stat --printf=%s "$name"` == 0 ] && [ $tries -lt 10 ]; do
		sleep 0.5
		tries=$(( $tries+1 ))
	done
	size=`stat --printf=%s "$name"`
	echo fin attente taille $size tries $tries
	if [ "$size" == "0" ]; then
		echo run_mp1: shortcut fichier à 0
		kill `cat player1.pid`
	fi
	if ! ps -p `cat player1.pid` >& /dev/null
	then
		echo plus de player1 tried=$tried flavour=$flavour
		change_flav
	else
		size=0
		# Et attend que la taille sur disque soit au moins d'1 Mo
		while [ -f "$name" ] && ! (mplayer2 -frames 0 -identify "$name" 2>/dev/null|grep -q ID_AUDIO_FORMAT) && \
			ps -p $pid >& /dev/null && \
			[ $(( `date +%s`-$start )) -lt 10 ]; do
		  sleep 0.1
		done
		while [ -f "$name" ] && ! (mplayer2 -frames 0 -identify "$name" 2>/dev/null|grep -q ID_VIDEO_FORMAT) && \
			ps -p $pid >& /dev/null && \
			[ $(( `date +%s`-$start )) -lt 10 ]; do
		  sleep 0.1
		done
		echo run_mp1: out of timeout loop, file : `ls -sk "$name"` ps :
		ps -p `cat player1.pid`

		timeout=$(( `date +%s`-$start ))
		if ps -p $pid >& /dev/null && [ -f "$name" ] && \
			mplayer2 -frames 0 -identify "$name" 2>/dev/null|grep ID_AUDIO_FORMAT && \
			mplayer2 -frames 0 -identify "$name" 2>/dev/null|grep ID_VIDEO_FORMAT; then
			ok=1 # fini !
		else
			echo run_mp1: timeout $timeout ou pb fichier
		fi
		if [ $timeout -gt 10 ] || [ "$timeout" == "10" ] || [ "$ok" == "0" ]; then
			# timeout
			echo run_mp1: timeout $timeout, ok=$ok change_flav
			kill $pid
			change_flav
			ok=0
		fi
	fi
done
# echo run_mp1: fin
echo $chaine > current
if [ "$src" != "" ]; then
	echo $src >> current
else
	if [ "$flavour" != "" ] || [ "$audio" != "" ]; then
		echo freebox >> current
	else
		echo dvb >> current
	fi
fi
echo $service >> current
echo $flavour >> current
echo $audio >> current
echo $video >> current
echo $name >> current
echo run_mp1 ok name=$name size=`stat --printf=%s "$name"` service=$service
exit 0
