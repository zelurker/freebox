#!/bin/bash

# lance le 1er process mplayer et dumpe le flux sur disque
# Tache de toujours réussir, retourne à d'anciennes valeurs connues si tout
# foire

if ! [ -d livetv ]; then
	mkdir livetv
fi
find livetv/ -mtime +1 -delete

service=$1
flavour=$2
audio=$3
video=$4
src=$5
chaine=$6
if [ "$src" == "0" ] || [ "$src" == "" ]; then
	src=freeboxtv
fi
if [ "$audio" == "0" ]; then
	audio=""
fi
if [ "$video" == "0" ]; then
	video=""
fi
echo run_mp1: src=$src video=$video audio=$audio flavour=$flavour service=$service chaine=$chaine
if [ "$src" == "flux" ]; then
	exit 0
fi
if [ -f player1.pid ] && ps -p `cat player1.pid` >& /dev/null; then
	kill `cat player1.pid` && rm -f player1.pid
fi
ok=0
while [ "$ok" == "0" ]; do
	if [ "$audio" != "" ]; then
		audio2="-aid $audio"
	fi
    # echo run_mp1: service $service flavour $flavour
	if [ "$chaine" == "" ]; then
		while ! [ -p fifo_list ]; do
			echo attente >& /dev/null
		done
		if [ "$src" == "dvb" ]; then
			echo name $service > fifo_list
		else
			echo name "$service" $flavour $audio > fifo_list
		fi
		chaine=`cat fifo_list`
	fi
	name=livetv/`date +"%Y%m%d %H%M%S $chaine.ts"`
	case $src in
		dvb)
			mplayer -quiet -dumpfile "$name" -dumpstream dvb://"$service" >& log &
			;;
		freebox|freeboxtv|"radios freebox")
			while ! ping -q -c 1 mafreebox.freebox.fr > /dev/null; do
				zenity --warning --text "Attente disponibilité réseau"
			done
				
			echo lancement mplayer $audio2 -dumpfile "$name" -quiet -dumpstream "rtsp://mafreebox.freebox.fr/fbxtv_pub/stream?namespace=1&service=$service&flavour=$flavour"
			mplayer $audio2 -dumpfile "$name" -quiet -dumpstream "rtsp://mafreebox.freebox.fr/fbxtv_pub/stream?namespace=1&service=$service&flavour=$flavour" >& log &
			;;
		flux)
			mplayer -quiet -dumpfile "$name" -dumpstream "$service" >& log &
			;;
		*)
			echo source $src pas prévue pour run_mp1, on sort
			exit 0
	esac
	pid=$!
	start=`date +%s`
	echo $pid > player1.pid
	tries=0
	# Laisse au moins 3s au flux pour commencer à arriver
	while [ $tries -lt 10 ] && ! [ -f "$name" ] && ps -p `cat player1.pid` >& /dev/null; do
		sleep 1
		tries=$(( $tries+1 ))
	done
	echo run_mp1: fin attente fichier tries=$tries
	if ! ps -p `cat player1.pid` >& /dev/null
	then
		if [ "$tried" == "" ] && [ "$flavour" != "" ]; then
			tried=flavour
			if [ "$flavour" == "sd" ]; then
				flavour=ld
			elif [ "$flavour" == "ld" ]; then
				flavour=sd
			fi
		else
			serv=`head -n 3 current|tail -n 1`
			flav=`head -n 4 current|tail -n 1`
			audio=`head -n 5 current|tail -n 1`
			video=`head -n 6 current|tail -n 1`
			src=`head -n 2 current|tail -n 1`
			if [ "$audio" == "0" ]; then
				audio=""
			fi
			if [ "$video" == "0" ]; then
				video=""
			fi
			if [ "$service" == "$serv" ] && [ "$flavour" == "$flav" ]; then
				service=201
				flavour=sd
			else
				service=$serv
				flavour=$flav
			fi
		fi
	else
		size=0
		# Et attend que la taille sur disque soit au moins d'1 Mo
		while [ -f "$name" ] && [ $size -lt 1024000 ] && \
			ps -p `cat player1.pid` >& /dev/null && \
			[ $(( `date +%s`-$start )) -lt 5 ]; do
			size=`stat --printf=%s "$name"`
		done
		if ps -p `cat player1.pid` >& /dev/null && [ -f "$name" ]; then
			ok=1 # fini !
		fi
		if ! [ $(( `date +%s`-$start )) -lt 10 ]; then
			# timeout
			echo run_mp1: timeout, falling back to default freebox src
			kill `cat player1.pid`
			service=201
			flavour=sd
			src=freeboxtv
			chaine="France 2"
			ok=0
		fi
	fi
done
# echo run_mp1: fin
echo $chaine > current
if [ "$src" != "" ]; then
	echo $src >> current
else
	if [ "$flavour" != "" ] || [ "$audio" != "" ]; then
		echo freebox >> current
	else
		echo dvb >> current
	fi
fi
echo $service >> current
echo $flavour >> current
echo $audio >> current
echo $video >> current
echo $name >> current
echo run_mp1 ok name=$name size=`stat --printf=%s "$name"`
exit 0
