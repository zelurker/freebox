#!/usr/bin/perl

use lib ".";
use HTML::Entities;
use strict;
use link_get;
use http;
use v5.10;
use Time::Local;

# binmode STDOUT,":utf8";
my $str = shift @ARGV;
$str =~ s/^get,//;
my @arg = split(/\//,$str);
my $utf = $ENV{LANG} =~ /utf/i;
my $server;

# Note le script est très court, mais il se repose principalement sur les
# noms qu'ils ont choisis pour leurs classes html, ce qui veut dire que ça
# risque de péter facilement au moindre changement, mais ça devrait être
# facile de corriger le code si ça arrive... !

my $page;
my $base;

if ($arg[0]) {
	my $text = $arg[0];
	$text =~ s/\|$//;
	$text =~ s/^.+\|//;
	$text = "undef" if (!$text);
	$arg[0] =~ s/\|/\//g;
	$base = $arg[0];
	$base =~ /https?...(.+?)\//;
	$server = $1;
	$page = http::myget($arg[0],"cache/ftv/$text",1/24.0);
} else {
	$base = "https://www.france.tv/";
	$server = "www.france.tv";
	$page = http::myget($base,"cache/ftv/j0",1/12.0);
}


if ($page =~ /FTVPlayerVideo/) {
	say "direct";
	say "Vidéo";
	# on a même plus besoin d'appeler youtube-dl, c'est mpv qui se charge
	# de tout, du coup lien direct, et on renvoie arg[0] au lieu de str, la
	# version pour que list.pl traitera bien comme une url
	say $arg[0];
	exit(0);
}

say "list";
# say "Recherche\nRecherche";

if (!$arg[0]) { # le menu des chaines, uniquement sur la 1ère page
	# while ($page =~ s/a href="([^"]+?)" class="c-sub-nav-item-channel.+?><img .+?alt="(.+?)"//) {
	while ($page =~ s/href="([^"]+?)" class="c-sub-nav-item-channel.+?title="(.+?)"//) {
		my $url = $1;
		my $text = decode_entities($2);
		say $text;
		if ($url =~ /^\/[a-z]/) {
			$url = "https://www.france.tv$url";
		} elsif ($url =~ /^\/\//) {
			$url = "https:$url";
		}
		$url =~ s/\//|/g; # pour que l'url puisse être passée en argument, on a pas le droit au /
		say $url;
	}
}
while ($page =~ s/a href="([^<^>^"]+?)" class="c-slider_item.+?data-src="(.+?)" alt="(.+?)"// ||
	$page =~ s/imagearea"><img src=".+?" data-src="(.+?)" alt="(.+?)".+?<a href="([^<^>^"]+?)" class="c-card-video.+?<h3>(.+?)<.+?<div class="c-card-video__textarea\-subtitle.+?> ?(.+?) ?<// ||
	$page =~ s/<a class="c-card-program__link" href="(.+?)" title="(.+?)"//) {
	# say STDERR "data-src=$1 alt=$2 href=$3 h3=$4 div=$5";
	my $url = $1;
	my $post = $4;
	my $postb = $5;
	my $img = undef;
	my $t = $3;
	my $text = undef;
	$text = decode_entities($2) if ($2);
	$text =~ s/ \- vidéo undef.+//;
	$text = undef if ($text =~ /^"/);
	if ($t =~ /^(http|\/).+html/) {
		$img = $url;
		$url = $t;
		$text = decode_entities($post);
		$text =~ s/ \- vid.o undef.+//;
		$text .= " ".decode_entities($postb) if ($postb);
	} elsif ($t =~ /^\/\//) {
		$img = "https:$t";
		$text = decode_entities($post);
	} elsif ($t =~ /^\/[a-z]/ && $url =~ /^\/\//) {
		$img = "https:$url";
		$url = $t;
		$text = decode_entities($post); # if (!$text);
		$text .= " ".decode_entities($postb) if ($postb);
	} else {
		$img = $2;
		if ($img =~ /^\//) {
			$img = "https:$img";
		} elsif ($img =~ /^\:/) {
			$img = "https$img";
		} elsif ($img !~ /^http/) {
			$img = undef;
		}
		$text = decode_entities($t) if ($t);
		$text .= " ".decode_entities($post) if ($post);
		$text =~ s/ \- programme.+//;
	}
	if ($url =~ /^\/[a-z]/) {
		$url = "https://$server$url";
	} elsif ($url =~ /^\/\//) {
		$url = "https:$url";
	}
	$url =~ s/\//|/g; # pour que l'url puisse être passée en argument, on a pas le droit au /
	print "pic:$img " if ($img);
	say $text;
	say $url;
}

