#!/usr/bin/perl

use strict;
require "http.pl";

binmode STDERR; # ,":utf8";
binmode STDOUT; # ,":utf8";
my $str = shift @ARGV;
my $debug = 0; # infos
my $dump = 0;  # dump toute l'entrée ligne par ligne
$str =~ s/^result\://;
if ($str =~ /http/) {
	print STDERR "str $str sending direct\n";
	print "direct\n";
} else {
	print STDERR "str $str sending list\n";
	print "list\n";
}
print "Recherche\nRecherche\n"; # Transmis en mode list (ne contient pas //)
$str =~ s/ /\+/g;
if ($debug && !$str) {
	# Mode debug : on lit à partir de stdin, passer une page sauvée de youtube
	# de préférence
	binmode STDIN; # ,":utf8";
	@_ = <>;
	$_ = join("",@_);
	$str = "http";
} else {
	if ($str && $str !~ /^http/) {
		$_ = myget( "http://www.youtube.com/results?search_query=$str&oq=$str");
	} elsif ($str) {
		print "debug: get $str\n" if ($debug);
		$_ = myget($str);
	} else {
		$_ = myget("http://www.youtube.com/");
	}
}
if (/encoding="(.+?)"/) {
	print "encoding: $1\n";
}

open(F,">yt.html");
print F $_;
close(F);
if ($str =~ /^http/) {
	# Extrait les formats vidéos de la page
	my ($title) = /<title>(.+?)<\/title/;
	my $start_tag = "url_encoded_fmt_stream_map";
	# $start_tag = "adaptive_fmts" if (!/sig=/);
	print STDERR "group $start_tag.\n" if ($debug);
	handle_tag($start_tag,$title);

	# adaptive_fmts : sépare le flux vidéo et audio dans 1 flux séparé, permet
	# + de choix, et y a une + haute qualité vidéo. Par contre ça met + de temps
	# à démarrer, les serveurs ont l'air de vouloir un délai de démarrage
	# imposé, peut-être pour la pub. Donc je les garde, mais en optionnel en fin
	# de liste.
	handle_tag("adaptive_fmts",$title) if (/adaptive_fmts/);
	exit(0);
}
my ($name,$url);
my %list = ();
my $content = 0;
my ($link,$text,$img,$data_text,$data_link);
foreach (split /\n/) {
	s/\&\#(..)\;/chr($1)/ge;
	print "debug:$_\n" if ($dump);
	if (/div class="result-item-main-content/ ||
		/class="yt-lockup-ellipsize"/) {
		$content = 1;
		print STDERR "*** debug: content $content\n" if ($debug);
	}
	if (/div class="feed-item-content"/) {
		$content = 2;
		print STDERR "*** debug: content $content\n" if ($debug);
	}
	if (/div class="yt-lockup2/) {
		# Autres résultats de recherche
		$content = 3;
		print STDERR "*** debug: content $content\n" if ($debug);
	}

	if (/href="(.+?)".*yt-thumb-clip-inner.+?src="(.+?)"/) {
		$link = $1;
		my $truc = $2;
		if ($truc =~ /jpg$/) {
			$img = $truc;
			print STDERR "debug: img = $truc link $link (ident clip-inner)\n" if ($debug);
		}
#		} elsif ($debug) {
#			print STDERR "debug: failed to recognize image $truc (ident clip-inner\n";
	}
	if (/data-context-item-title="(.+?)"/) {
		$data_text = $1;
		print STDERR "debug: data_text = $data_text\n" if ($debug);
	} elsif (/data-sessionlink.*href="(.+?)"/ || /href="(.+?)".*data-sessionlink/) {
		$data_link = $1;
		$data_link = "" if ($data_link !~ /watch/);
		print STDERR "debug: data_link = $data_link\n" if ($debug);
	}
	if (/data-thumb="\/\/(.+?)"/ || /yt-thumb-clip-inner"><img src="\/\/(.+?)"/
	|| /<img alt="Miniature" src="\/\/(.+?)"/) {
		my $truc = "http://$1";
		if ($truc =~ /jpg$/) {
			$img = $truc;
			if ($data_link && $data_text) {
				if ($debug) {
					print STDERR "debug: data pic $img link $data_link text $data_text\n";
				} else {
					print ($img ? "pic:$img " : "");
					if (!utf8::valid($data_text)) {
						die "problème $data_text\n";
					}
					print $data_text;
					print "\nhttp://www.youtube.com$data_link\n";
				}
			}
			$data_link = $data_text = "";
#		} elsif ($debug) {
#			print STDERR "debug: failed to recognize image $truc (ident data-thumb\n";
		}
	}
	if ($content == 1) {
		if (/href="(\/.+?)".*?\>(.+)<\/a/) {
			my ($url,$text) = ($1,$2);
			$img = "http:$img" if ($img =~ /^\/\//);
			print ($img ? "pic:$img " : "");
			print "$text\nhttp://www.youtube.com$url\n";
			$img = undef;
			$content = 0;
		}
	} elsif ($content == 3) {
		if (/yt-lockup2-title.*title="(.+?)"/) {
			$_ = $1;
			$img = "http:$img" if ($img =~ /^\/\//);
			if ($debug) {
				print STDERR "debug: content3 pic $img link $link text $_\n";
			} else {
				print ($img ? "pic:$img " : "");
				print "$_\nhttp://www.youtube.com$link\n";
			}
			$link = $content = undef;
		}
	}
}

sub handle_tag {
	my ($start_tag,$title) = @_;
	my $last = "";
	while (s/\"$start_tag\": \"(.+?)\"//) {
		my $url = $1;
		$url =~ s/\\\//\//g;
		$url =~ s/%(..)/chr(hex($1))/ge;
		$url =~ s/generate_204/videoplayback/g;
		$url =~ s/\\u(....)/chr(hex($1))/ge;
		my ($tag) = $url =~ /^(.+?)\=/;
		print STDERR "starting tag $tag\n" if ($debug);
		my (@name,@url);
		my $audio;
		while ($url =~ s/($tag=.+?)(,$tag=|$)/$2/) {
			my $u = $1;
			$u =~ s/\\\//\//g;
			while ($u =~ s/%(..)/chr(hex($1))/ge) {}
			$u =~ s/generate_204/videoplayback/g;
			$u =~ s/\\u(....)/chr(hex($1))/ge;
			# L'url arrive avec la plupart de ses arguments encodés, et une
			# partie en clair (et pour certains doublés, comme itag). Passer
			# itag en double provoque un 403, donc le + simple c'est de tout
			# remettre à plat en récupérant tout dans un hash et en éliminant
			# ce qu'on veut pas
			my @args = split(/[\?\&]/,$u);
			my %args;
			foreach (@args) {
				my ($name,$val) = split(/=/);
				$args{$name}=$val;
			}
			my $type = delete $args{type};
			my $s;
			if ($args{sig}) {
				$s = delete $args{sig};
				print STDERR "*** sig1: $s\n";
			} elsif ($args{s}) {
				# L'encodage de la signature est en fonction da la longueur de s
				# problème : je ne connais pas toutes les longueurs possibles
				# ça a changé 1 fois en 2 jours, y en a probablement d'autres
				print STDERR "s $args{s}\n" if ($debug);
				if (length($args{s}) == 88) {
					my $pre = substr($args{s},0,1);
					$s = substr(delete $args{s},1);
					my $post = substr($s,length($s)-6);
					my $s2 = "";
					for (my $n=length($s)-7; $n>=0; $n--) {
						$s2 .= substr($s,$n,1);
					}
					$s = $s2;
					my $prev = substr($s,16,1);
					substr($s,16,1) = substr($post,2,1);
					substr($s,21,1) = $prev;
					substr($s,49,1) = $pre;
				} elsif (length($args{s}) == 84) {
					$s = substr(reverse(delete $args{s}),1);
					my $post = substr($s,0,1);
					$s = substr($s,1);
					my $pre = substr($s,0,1);
					substr($s,0,1) = substr($s,39,1);
					substr($s,39,1) = $pre;
					substr($s,20,1) = substr($s,26,1);
					substr($s,26,1) = $post;
					substr($s,56,1) = substr($s,81,1);
					substr($s,81,1) = "";
				} elsif (length($args{s}) == 82) {
					$s = delete $args{s};
					my $pre = substr($s,0,1);
					my $old = $s = substr($s,1);
					substr($s,14,1) = substr($s,36,1);
					substr($s,36,1) = substr($s,0,1);
					substr($s,0,1) = substr($old,14,1);
					substr($s,2,1) = $pre;
					substr($s,41,1) = substr($s,80,1);
					substr($s,80,1) = substr($old,41,1);
					substr($s,50,1) = substr($old,2,1);
				}
				print STDERR "sig2: $s (",length($s),")\n" if ($debug);
			}
			my $q = delete $args{quality};
			$q = delete $args{size} if (!$q);
			$q =~ s/,.+//;
			delete $args{index};
			my $bitrate = delete $args{bitrate};
			delete $args{init};
			$last = $q;
			$type =~ s/;.+//;
			if ($s) {
				$u = delete $args{url};
				$u .= "?";
				foreach (keys %args) {
					$u .= "&$_=".$args{$_};
				}
				print STDERR "processing type $type\n" if ($debug);
				# Sépare les pistes audio pour les adaptive
				if ($type !~ /^audio/) {
					push @name,"$title $q $type $bitrate";
					push @url,"$u&signature=$s";
				} else {
					$audio = "$u&signature=$s";
				}
			}
		}
		if ($audio) {
			foreach (@url) {
				$_ .= " $audio";
			}
		}
		print STDERR "in ze end : $#name names\n" if ($debug);
		for (my $n=0; $n<=$#name; $n++) {
			print "$name[$n]\n$url[$n]\n";
		}
		print STDERR "url0 = $url[0]\n";
		# return $url;
	}
}

