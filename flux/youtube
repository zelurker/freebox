#!/usr/bin/perl

use strict;
require "http.pl";
use HTML::Entities;
use v5.10;

binmode STDERR; # ,":utf8";
binmode STDOUT; # ,":utf8";
my $str = shift @ARGV;
my $debug = 0; # infos
my $dump = 0;  # dump toute l'entrée ligne par ligne
$str =~ s/^result\://;
if ($str =~ /^get,(\d+),(.+)/) {
	print STDERR "str $str sending direct\n";
	my ($format,$suffix) = ($1,$2);
	print STDERR "got format $format suffix $suffix\n";
	my $title;
	if (open(F,"<cache/yt/$suffix")) {
		$title = <F>;
		chomp $title;
		$title =~ s/^pic:.+? //;
		close(F);
		print STDERR "got title $title\n";
	} else {
		die "could not get title from $suffix\n";
	}
	if (! -f "$ENV{HOME}/bin/youtube-dl") {
		mkdir "$ENV{HOME}/bin";
		# apparemment le binaire est modifié après execution, on lui retire
		# les droits d'écriture, pas sûr que ça suffise mais ça vaut le
		# coup de voir...
		system("wget -q -N -c -O ~/bin/youtube-dl https://yt-dl.org/downloads/latest/youtube-dl 2> /dev/null && chmod +x ~/bin/youtube-dl && chmod -w ~/bin/youtube-dl");
	}
	my ($sec,$min,$hour,$mday,$mon,$year) = localtime();
	my $file = sprintf("%d%02d%02d-%02d%02d.mp4",$year+1900,$mon+1,$mday,$hour,$min);
	my $pid = fork();
	if (!$pid) {
		say STDERR "*** lancement youtube-dl -q -o $file -f $format https://www.youtube.com/watch?v=$suffix";
		chdir("records");
		exec("~/bin/youtube-dl -q -o $file -f $format https://www.youtube.com/watch?v=$suffix 1> /dev/null");
	} else {
		my $tries = 0;
		$| = 1;
		while (!-f "records/$file.part" && !-f "records/$file" && $tries < 10) {
			$tries++;
			say STDERR "pas de fichier records/$file\[.part] try $tries";
			sleep 1;
		}
		if ($tries == 10) {
			print STDERR "pas trouvé le fichier attendu racine:records/$file. on va essayer en aveugle\n";
			print "records/$file*\n";
			exit(0);
		}
		print STDERR "trouvé le fichier après $tries secondes\n";
		$file = "records/$file";
		$file .= ".part" if (! -f $file);
		print STDERR "file = $file\n";
		my $r = $file;
		$r =~ s/.part$//;
		rename("cache/yt/$suffix","$r.info");
		$tries = 0;
		while (-s "$file" < 3*1024*1024 && $tries < 10) {
			sleep 1;
			$tries ++;
		}
		print STDERR "taille ",(-s "$file")," après $tries secondes\n";
		print "$file\n";
		exit(0);
	}
} elsif ($str !~ /^http/ || $str =~ /channel/) {
	print STDERR "str $str sending list\n";
	print "list\n";
	print "Recherche\nRecherche\n"; # Transmis en mode list (ne contient pas //)
}
$str =~ s/ /\+/g;
if ($debug && !$str) {
	# Mode debug : on lit à partir de stdin, passer une page sauvée de youtube
	# de préférence
	binmode STDIN; # ,":utf8";
	@_ = <>;
	$_ = join("",@_);
	# On passe str = "http" quand c'est le traitement d'une page de vidéo
	# passer str="" pour un index de vidéos
	$str = "http://channel";
} else {
	if ($str && $str !~ /^http/) {
		$_ = myget( "http://www.youtube.com/results?search_query=$str&oq=$str");
	} elsif ($str) {
		print "debug: get $str\n" if ($debug);
		$_ = myget($str);
	} else {
		$_ = myget("http://www.youtube.com/");
	}
}
if (/encoding="(.+?)"/) {
	print "encoding: $1\n";
}

if (!$debug) {
	open(F,">yt.html");
	print F $_;
	close(F);
}
my $suffix;
if ($str =~ /^http/ && $str !~ /channel/) {
	# Extrait les formats vidéos de la page
	print "direct\n";
	my ($title) = /<title>(.+?)<\/title/;
	$title =~ s/ \- YouTube$//;

	($suffix) = $str =~ /v=(.+)/;
	my $start_tag = "url_encoded_fmt_stream_map";
	handle_tag($start_tag,$title);

	mkdir "cache/yt";
	# On aimerait bien sauver sous le nom du suffix pour qu'il soit unique,
	# sauf qu'il n'arrive jamais jusqu'au bandeau d'info, ça reste une
	# valeur intermédiaire gérée par list vu que le dernier argument est la
	# vidéo elle même... Résultat : faut utiliser le titre !!!
	my ($upload) = $_ =~ /div id="watch-uploader-info">(.+?)<\/div/;
	my ($info) = $_ =~ /div id="watch-description-text".*?>(.+?)<\/div/;
	$info = decode_entities($info);
	my $img = "http://i.ytimg.com/vi/$suffix/mqdefault.jpg";
	open(F,">cache/yt/$suffix");
	print F "pic:$img $title\nUploader : $upload\n$info\n";
	close(F);
	exit(0);
}
my ($name,$url);
my %list = ();
my $content = 0;
my ($link,$text,$img,$data_text,$data_link);
foreach (split /\n/) {
	s/\&\#(..)\;/chr($1)/ge;
	print "debug:$_\n" if ($dump);
	# A priori les content ne sont plus utilisés, faudrait faire le ménage
	# un de ces 4... enfin pour l'instant je laisse ça là...
	if (/div class="result-item-main-content/ ||
		/class="yt-lockup-ellipsize"/) {
		$content = 1;
		print STDERR "*** debug: content $content\n" if ($debug);
	}
	if (/div class="feed-item-content"/) {
		$content = 2;
		print STDERR "*** debug: content $content\n" if ($debug);
	}
	if (/div class="yt-lockup2/) {
		# Autres résultats de recherche
		$content = 3;
		print STDERR "*** debug: content $content\n" if ($debug);
	}
	# Note : le texte du titre est apparemment souvent sur la même ligne
	# que l'image d'après, donc il faut absolument traiter ça en 1er !
	if (/yt-lockup-title.+?title="(.+?)"/) {
		$data_text = $1;
		print STDERR "debug: data_text = $data_text\n" if ($debug);
	}
	if ($data_link && $data_text) {
		if ($img =~ /^\/\//) {
			$img = "http:$img";
		} elsif (!$img) {
			my ($id) = $data_link =~ /v=(.+)/;
			# On reconstitue l'image à partir de l'id vidéo, ça vaut mieux,
			# tout se mélange là-dedans !
			$img = "http://i.ytimg.com/vi/$id/mqdefault.jpg";
			print STDERR "image reconstituée d'après id video\n" if ($debug);
		}
		if ($debug) {
			print STDERR "debug: data pic $img link $data_link text $data_text\n";
		} else {
			print ($img ? "pic:$img " : "");
			if (!utf8::valid($data_text)) {
				die "problème $data_text\n";
			}
			print $data_text;
			print "\nhttp://www.youtube.com$data_link\n";
		}
		$data_link = $data_text = $img = "";
	}

	if (/href="(.+?)".*yt-thumb-simple.+?src="(.+?)"/) {
		$link = $1;
		my $truc = $2;
		if ($truc =~ /jpg$/) {
			$img = $truc;
			# Le texte doit être en dernier !!!
			$data_text = undef;
			print STDERR "debug: img = $truc link $link (ident clip-inner)\n" if ($debug);
		}
#		} elsif ($debug) {
#			print STDERR "debug: failed to recognize image $truc (ident clip-inner\n";
	}
	$img = $1 if (/data\-thumb="(.+?)"/);
   	if (/data-sessionlink.*href="(.+?)"/ || /href="(.+?)".*data-sessionlink/) {
		$data_link = $1;
		$data_link = "" if ($data_link !~ /(watch|channel)/);
		print STDERR "debug: data_link = $data_link\n" if ($debug);
	}
	if ($content == 1) {
		if (/href="(\/.+?)".*?\>(.+)<\/a/) {
			my ($url,$text) = ($1,$2);
			$img = "http:$img" if ($img =~ /^\/\//);
			print ($img ? "pic:$img " : "");
			print "$text\nhttp://www.youtube.com$url\n";
			$img = undef;
			$content = 0;
		}
	} elsif ($content == 3) {
		if (/yt-lockup2-title.*title="(.+?)"/) {
			$_ = $1;
			$img = "http:$img" if ($img =~ /^\/\//);
			if ($debug) {
				print STDERR "debug: content3 pic $img link $link text $_\n";
			} else {
				print ($img ? "pic:$img " : "");
				print "$_\nhttp://www.youtube.com$link\n";
			}
			$link = $content = undef;
		}
	}
}

sub handle_tag {
	# Cette sub récupère les différents formats vidéos d'une page, y en a
	# de 2 sortes qui sont déterminés par start_tag :
	# url_encoded_fmt_map qui est le format par défaut
	# adaptive_fmt qui fournit une résolution et une piste audio séparée !
	# Avant j'essayais aussi de décoder la signature, mais je n'ai jamais
	# trouvé comment elle change environ tous les jours, donc je laisse
	# tomber et je laisse ça à youtube-dl, je garde quand même la sub pour
	# la liste des formats, beaucoup + rapide que d'appeler youtube-dl pour
	# ça.
	my ($start_tag,$title) = @_;
	my $last = "";
	print STDERR "handle_tag start_tag $start_tag title $title.\n" if ($debug);
	while (s/\"$start_tag\": ?\"(.+?)\"//) {
		print STDERR "in while\n" if ($debug);
		my $url = $1;
		$url =~ s/\\\//\//g;
		$url =~ s/%(..)/chr(hex($1))/ge;
		$url =~ s/generate_204/videoplayback/g;
		$url =~ s/\\u(....)/chr(hex($1))/ge;
		my ($tag) = $url =~ /^(.+?)\=/;
		print STDERR "starting tag $tag\n" if ($debug);
		my (@name,@url);
		my $audio;
		while ($url =~ s/($tag=.+?)(,$tag=|$)/$2/) {
			my $u = $1;
			$u =~ s/\\\//\//g;
			while ($u =~ s/%(..)/chr(hex($1))/ge) {}
			$u =~ s/generate_204/videoplayback/g;
			$u =~ s/\\u(....)/chr(hex($1))/ge;
			# L'url arrive avec la plupart de ses arguments encodés, et une
			# partie en clair (et pour certains doublés, comme itag). Passer
			# itag en double provoque un 403, donc le + simple c'est de tout
			# remettre à plat en récupérant tout dans un hash et en éliminant
			# ce qu'on veut pas
			print STDERR "url $u\n" if ($debug);
			my @args = split(/[\?\&]/,$u);
			my %args;
			foreach (@args) {
				# La séparation actuelle des args est un hack, il faudrait
				# revoir ça pour gérer correctement les pistes séparées, le
				# problème c'est que c'est un sacré bazar :
				# arguments \u0026 qui font une espèce de header
				# puis argument url avec arguments internes collés avec des
				# %3d
				# puis un autre bloc \u0026 pour la partie audio
				# donc séparer les 2 s'annonce + que délicat. Pour
				# l'instant seule la dernière url audio est récupéré avec
				# ce hack, c'est + une preuve que ça marche...
				# my (@eq) = split(/=/);
				# $args{$eq[0]}=join("",@eq[1..$#eq]);
				my ($name,$val) = split(/=/);
				$args{$name}=$val;
			}
			my $type = delete $args{type};
#			# Ca valait le coup d'essayer, mais apparemment requiressl ne
#			change pas grand chose, si on essaye de le coller à no on prend
#			toujours un 403 en http, et aucun flux en https. Vaut mieux pas
#			toucher !
#			if ($args{requiressl}) {
#				$args{requiressl} = "no";
#				$args{url} =~ s/https/http/;
#			}
			my $q = delete $args{quality};
			$q = delete $args{size} if (!$q);
			$q =~ s/,.+//;
			delete $args{index};
			my $bitrate = delete $args{bitrate};
			delete $args{init};
			$last = $q;
			$type =~ s/;.+//;
			$u = delete $args{url};
			$u .= "?";
			foreach (keys %args) {
				$u .= "&$_=".$args{$_};
			}
			print STDERR "processing q=$q type=$type bitrate=$bitrate\n" if ($debug);
			# Sépare les pistes audio pour les adaptive
			if ($type !~ /^audio/) {
				# Il faut garder le titre ici pour le bandeau d'info...
				push @name,"$title $q $type $args{codecs}"; # on laisse tomber le bitrate
				push @url,"get,$args{itag},$suffix";
			} else {
				$audio = "$u";
				print STDERR "*** addendum à $name[$#name] = $type\n";
				$name[$#name] .= " $type"; # apparemment l'audio est 2ème
			}
		}
		if ($audio) {
			foreach (@url) {
				$_ .= " $audio";
			}
		}
		print STDERR "in ze end : $#name names\n" if ($debug);
		for (my $n=0; $n<=$#name; $n++) {
			print "$name[$n]\n$url[$n]\n";
		}
		# return $url;
	}
}
