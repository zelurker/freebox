#!/usr/bin/perl

use strict;
require "http.pl";
use File::Glob 'bsd_glob'; # le glob dans perl c'est n'importe quoi !

binmode STDERR; # ,":utf8";
binmode STDOUT; # ,":utf8";
my $str = shift @ARGV;
my $debug = 0; # infos
my $dump = 0;  # dump toute l'entrée ligne par ligne
$str =~ s/^result\://;
if ($str =~ /^(\d+),(.+)/) {
	print STDERR "str $str sending direct\n";
	print "direct\n";
	my ($format,$suffix) = ($1,$2);
	print STDERR "got format $format suffix $suffix\n";
	my $title;
	if (open(F,"<cache/yt/$suffix")) {
		$title = <F>;
		close(F);
		print STDERR "got title $title\n";
	} else {
		die "could not get title from $suffix\n";
	}
	my $pid = fork();
	if (!$pid) {
		chdir("records");
		exec("~/bin/youtube-dl -q -f $format $suffix 1> /dev/null");
	} else {
		my $tries = 0;
		$title =~ s/\[/\\\[/g;
		$title =~ s/\]/\\\]/g;
		$title =~ s/\&#(\d+);/chr($1)/ge;
		while (!bsd_glob("records/$title*") && $tries < 10) {
			$tries++;
			sleep 1;
		}
		if ($tries == 10) {
			print STDERR "pas trouvé le fichier attendu racine:records/$title*. on va essayer en aveugle\n";
			print "records/$title*\n";
			exit(0);
		}
		print STDERR "trouvé le fichier après $tries secondes\n";
		my $file = bsd_glob("records/$title*");
		print STDERR "file = $file\n";
		$tries = 0;
		while (-s "$file" < 3*1024*1024 && $tries < 10) {
			sleep 1;
			$tries ++;
		}
		print STDERR "taille ",(-s "$file")," après $tries secondes\n";
		print "$file\n";
		exit(0);
	}
} else {
	print STDERR "str $str sending list\n";
	print "list\n";
	print "Recherche\nRecherche\n"; # Transmis en mode list (ne contient pas //)
}
$str =~ s/ /\+/g;
if ($debug && !$str) {
	# Mode debug : on lit à partir de stdin, passer une page sauvée de youtube
	# de préférence
	binmode STDIN; # ,":utf8";
	@_ = <>;
	$_ = join("",@_);
	# On passe str = "http" quand c'est le traitement d'une page de vidéo
	# passer str="" pour un index de vidéos
	$str = "http";
} else {
	if ($str && $str !~ /^http/) {
		$_ = myget( "http://www.youtube.com/results?search_query=$str&oq=$str");
	} elsif ($str) {
		print "debug: get $str\n" if ($debug);
		$_ = myget($str);
	} else {
		$_ = myget("http://www.youtube.com/");
	}
}
if (/encoding="(.+?)"/) {
	print "encoding: $1\n";
}

if (!$debug) {
	open(F,">yt.html");
	print F $_;
	close(F);
}
if ($str =~ /^http/) {
	# Extrait les formats vidéos de la page
	my ($title) = /<title>(.+?)<\/title/;
	$title =~ s/ \- YouTube$//;

	if (! -f "~/bin/youtube-dl") {
		mkdir "~/bin";
		system("wget -q -N -c -O ~/bin/youtube-dl https://yt-dl.org/downloads/latest/youtube-dl 2> /dev/null && chmod +x ~/bin/youtube-dl");
	}
	my ($suffix) = $str =~ /v=(.+)/;
	open(F,"~/bin/youtube-dl -F $str|grep -v only|");
	while (<F>) {
		chomp;
		if (/^(\d+)/) {
			print "$_\n$1,$suffix\n";
		}
	}
	close(F);

	mkdir "cache/yt";
	# On aimerait bien sauver sous le nom du suffix pour qu'il soit unique,
	# sauf qu'il n'arrive jamais jusqu'au bandeau d'info, ça reste une
	# valeur intermédiaire gérée par list vu que le dernier argument est la
	# vidéo elle même... Résultat : faut utiliser le titre !!!
	open(F,">cache/yt/$title");
	my ($upload) = $_ =~ /div id="watch-uploader-info">(.+?)<\/div/;
	my ($info) = $_ =~ /div id="watch-description-text".*?>(.+?)<\/div/;
	print F "$suffix\n", # on met le suffix parce qu'on peut récupérer l'image
	"$upload\n$info\n";
	close(F);
	open(F,">cache/yt/$suffix");
	print F $title;
	close(F);
	exit(0);
}
my ($name,$url);
my %list = ();
my $content = 0;
my ($link,$text,$img,$data_text,$data_link);
foreach (split /\n/) {
	s/\&\#(..)\;/chr($1)/ge;
	print "debug:$_\n" if ($dump);
	# A priori les content ne sont plus utilisés, faudrait faire le ménage
	# un de ces 4... enfin pour l'instant je laisse ça là...
	if (/div class="result-item-main-content/ ||
		/class="yt-lockup-ellipsize"/) {
		$content = 1;
		print STDERR "*** debug: content $content\n" if ($debug);
	}
	if (/div class="feed-item-content"/) {
		$content = 2;
		print STDERR "*** debug: content $content\n" if ($debug);
	}
	if (/div class="yt-lockup2/) {
		# Autres résultats de recherche
		$content = 3;
		print STDERR "*** debug: content $content\n" if ($debug);
	}
	# Note : le texte du titre est apparemment souvent sur la même ligne
	# que l'image d'après, donc il faut absolument traiter ça en 1er !
	if (/yt-lockup-title.+?title="(.+?)"/) {
		$data_text = $1;
		print STDERR "debug: data_text = $data_text\n" if ($debug);
	}
	if ($data_link && $data_text) {
		if ($img =~ /^\/\//) {
			$img = "http:$img";
		} elsif (!$img) {
			my ($id) = $data_link =~ /v=(.+)/;
			# On reconstitue l'image à partir de l'id vidéo, ça vaut mieux,
			# tout se mélange là-dedans !
			$img = "http://i.ytimg.com/vi/$id/mqdefault.jpg";
			print STDERR "image reconstituée d'après id video\n" if ($debug);
		}
		if ($debug) {
			print STDERR "debug: data pic $img link $data_link text $data_text\n";
		} else {
			print ($img ? "pic:$img " : "");
			if (!utf8::valid($data_text)) {
				die "problème $data_text\n";
			}
			print $data_text;
			print "\nhttp://www.youtube.com$data_link\n";
		}
		$data_link = $data_text = $img = "";
	}

	if (/href="(.+?)".*yt-thumb-simple.+?src="(.+?)"/) {
		$link = $1;
		my $truc = $2;
		if ($truc =~ /jpg$/) {
			$img = $truc;
			# Le texte doit être en dernier !!!
			$data_text = undef;
			print STDERR "debug: img = $truc link $link (ident clip-inner)\n" if ($debug);
		}
#		} elsif ($debug) {
#			print STDERR "debug: failed to recognize image $truc (ident clip-inner\n";
	}
	$img = $1 if (/data\-thumb="(.+?)"/);
   	if (/data-sessionlink.*href="(.+?)"/ || /href="(.+?)".*data-sessionlink/) {
		$data_link = $1;
		$data_link = "" if ($data_link !~ /watch/);
		print STDERR "debug: data_link = $data_link\n" if ($debug);
	}
	if ($content == 1) {
		if (/href="(\/.+?)".*?\>(.+)<\/a/) {
			my ($url,$text) = ($1,$2);
			$img = "http:$img" if ($img =~ /^\/\//);
			print ($img ? "pic:$img " : "");
			print "$text\nhttp://www.youtube.com$url\n";
			$img = undef;
			$content = 0;
		}
	} elsif ($content == 3) {
		if (/yt-lockup2-title.*title="(.+?)"/) {
			$_ = $1;
			$img = "http:$img" if ($img =~ /^\/\//);
			if ($debug) {
				print STDERR "debug: content3 pic $img link $link text $_\n";
			} else {
				print ($img ? "pic:$img " : "");
				print "$_\nhttp://www.youtube.com$link\n";
			}
			$link = $content = undef;
		}
	}
}

