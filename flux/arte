#!/usr/bin/perl

use lib ".";
use Cpanel::JSON::XS qw(decode_json);
use HTML::Entities;
use strict;
use link_get;
require "http.pl";
use v5.10;
use Data::Dumper;
use Time::Local;

# binmode STDOUT,":utf8";
my $str = shift @ARGV;
my @arg = split(/\//,$str);
my ($cat) = $arg[1] =~ /^cat:(.+)/;
my $utf = $ENV{LANG} =~ /utf/i;
splice @arg,1,1 if ($cat);
# my $guide = $arg[0] =~ /Guide/;

sub disp_available() {
	if ($_->{availability}) {
		my $t = $_->{availability}{start};
		if ($t =~ /(\d+)\-(\d+)-(\d+)T(\d+):(\d+):(\d+)Z/) {
			my $t = timegm($6,$5,$4,$3,$2-1,$1-1900);
			my ($sec,$min,$hour,$mday,$mon,$year) = localtime($t);
			print "$mday/",$mon+1,"/",$year+1900," ",sprintf("%02d:%02d:%02d ",$hour,$min,$sec);
		}
	}
	say $_->{title},($_->{subtitle} ? " - ".$_->{subtitle} : "");
}

sub handle_hash {
  my ($hash,$code) = @_;
  my $count = 0;
  foreach (@$hash) {
	  if ($_->{content}{data}) {
		  handle_hash($_->{content}{data},$code);
		  next;
	  }
	  $count++;
	  if ($_->{url} =~ /m3u8?$/) {
		  my $url = $_->{url};
		  my $label = $_->{versions}[0]{label};
		  # m3u...
		  my $m3u = myget($url,"cache/arte/$code.m3u",7);
		  $count = 0;
		  my ($audio,$subs);
		  foreach (split /\n/,$m3u) {
			  next if (/^#EXTM3U/);
			  if (/^#EXT-X-MEDIA:TYPE=AUDIO.+URI="(.+?)"/) {
				  my $url0 = $url;
				  my $aud = $1;
				  $url0 =~ s/^(.+)\/.+?$/$1\//;
				  $audio = $url0.$aud;
			  }
			  if (/^#EXT-X-MEDIA:TYPE=SUBTITLES.*URI="(.+)"/) {
				  my $url0 = $url;
				  my $aud = $1;
				  $url0 =~ s/^(.+)\/.+?$/$1\//;
				  $subs = $url0.$aud;
				  # Obligé de pré-traiter les subs parce que mpv disjoncte quand il y a des styles dedans... !
				  my ($file) = $subs =~ /^.+\/(.+?)$/;
				  my $text = myget($subs,"cache/arte/$file",7);
				  # 1 : récupère le fichier vtt là-dedans...
				  my $vtt = undef;
				  foreach (split /\n/,$text) {
					  s/\r//;
					  next if (/^#/);
					  if ($_) {
						  $vtt = $_;
						  last;
					  }
				  }
				  $subs =~ s/^(.+)\/.+?$/$1\//;
				  $subs .= $vtt;
				  $text = myget($subs,"cache/arte/$vtt",7);
				  $subs = "cache/arte/$vtt"."2";
				  if (!open(F,">$subs")) {
					  die "can't create $subs";
				  }
				  my $filter = 0;
				  my $n = 0;
				  $text =~ s/\r//g;
				  foreach (split /\n/,$text) {
					  # !?! ce split me génère 1 ligne vide pour chaque vraie ligne
					  # c'est peut-être la chaleur mais je pige pas d'où ça vient, donc je les filtre avec ce $filter
					  # il en reste encore un peu dans l'entête mais c'est déjà mieux !
					  if (/STYLE/) {
						  $filter = 1;
					  } elsif (/}/) {
						  $filter = -2;
					  } elsif (!$filter) {
						  say F $_;
						  if ($_ ne "") {
							  $filter = -1;
						  }
					  } elsif ($filter < 0) {
						  $filter++;
					  }
				  }
				  close(F);
			  }
		  }
		  foreach (split /\n/,$m3u) {
			  next if (/^#EXTM3U/);
			  #EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=128000,CODECS="mp4a.40.2"
			  if (/^#EXT.X.STREAM.INF.*BANDWIDTH=(\d+)/) {
				  my $band = $1;
				  if (/,RESOLUTION=(\d+x\d+)/) {
					  my $res = $1;
					  if (/,CODECS="(.+?)"/) {
						  say "$res ".($band/1000)."kbps $label";
					  }
				  }
				  next;
			  } elsif (/^#EXT.X.STREAM.INF.*BANDWIDTH=(\d+),CODECS="(.+?)"/) {
				  say "audio only: ".($1/1000)."kbps codecs:$2";
				  next;
			  } elsif (/^http/) {
				  $count++;
				  say "get,$_";
			  } elsif (/^media/) {
				  my $url0 = $url;
				  $url0 =~ s/^(.+)\/.+?$/$1\//;
				  $count++;
				  say $url0,$_,($audio ? " $audio" : ""),($subs ? " $subs" : "");
			  } elsif ($_ ne "") {
				  my $url0 = $url;
				  $url0 =~ s/^(.+)\/.+?$/$1\//;
				  $count++;
				  say $url0,$_,($audio ? " $audio" : ""),($subs ? " $subs" : "");
				  # say STDERR "m3u: ligne non reconnue : $_.";
			  }
		  }
		  next;
	  }
	  if ($_->{mainQuality}) {
		  print "$_->{mainQuality}{label} $_->{versions}[0]{shortLabel}\n";
		  if ($_->{streamer}) {
			  print "get,$_->{streamer}$_->{url}\n";
		  } else {
			  print "get,$_->{url}\n";
		  }
	  } else {
		  # on suppose que c'est un index...
		  disp_available();
		  say "vid:$_->{programId},$_->{url}";
	  }
  }
}

sub decode_prg {
    $_ = shift;
	say STDERR "decode_prg: ",Dumper($_);
    if (ref($_) eq "ARRAY") {
        foreach (@$_) {
			decode_prg($_->{data}) if ($_->{data});
            if (ref($_) eq "HASH" && $_->{programId}) {
				disp_available();
                my $url = $_->{url};
				$url = "http://www.arte.tv$url" if ($url !~ /^http/);
                $url =~ s/\//|/g; # pour que l'url puisse être passée en argument, on a pas le droit au /
				say "$str/vid:$_->{programId},$url";
            } # note : certains programmes genre vod n'ont pas de programid, on affiche donc pas
        }
	} elsif ($_->{data}) {
		decode_prg($_->{data});
    } else {
        die "decode_prg: pas de tableau ? : data ",$_{data}," dumper ",Dumper($_);
    }
}

sub decode_type {
# décodage catégorie
    $_ = shift;
	my $base = 0;
	$base = 1 if ($arg[0] =~ /^vid:/);
	# say STDERR "decode_type ",ref($_)," : ",Dumper($_);
    if (ref($_) eq "ARRAY") {
        foreach (@$_) {
			# say STDERR "decode_type: type : $_->{type}, argbase $arg[$base]";
			my $code = $_->{code};
			if (ref($code) eq "HASH") {
				if ($code->{id}) {
					$code = $code->{id};
				} else {
					$code = $code->{name};
				}
			}
			# say STDERR "decode_type code $code cat $cat";
			if ($_->{content}{data}) { # eq "HOME") {
				my $data = $_->{content}{data};
				$data = $#$data;
				if ($data > -1 && $_->{title} !~ /^Banner/i) {
					# filtre les entrées vides de l'index ! (et les
					# bannières)
					if ($cat eq $code || $str =~ /vid:/ || $str =~ /^Guide/) {
						decode_prg($_->{content}{data});
					} elsif (!$cat && $_->{title}) {
						say $_->{title};
						say "$str/cat:$code";
					}
				}
			} elsif ($_->{title}) { # catégories de vidéos
                if (!$arg[$base] && $_->{title}) {
# Note : y a des entrées sans titre avec comme type "banner", mais y en a
# plusieurs. Je suppose que c'est lié aux vidéos
# affichées dans la bannière de haut d'écran, on laisse
# tomber à priori...
                    print $_->{title}."\n$str$code\n";
                } elsif ($code eq $arg[$base]) {
					my ($code,$url);
					if ($_->{link}{url}) {
						$url = $_->{link}{url};
						$code = $_->{link}{page};
						$url =~ s:/:|:g;
					}
                    decode_prg($_->{data});
					if ($url) {
						say "Plus...";
						say "+vid:$code,$url";
					}
                }
            } else {
                die "decode_type: reconnais pas ça : ".Dumper($_);
            }
        }
    } else {
        die "decode_type: pas de tableau ?";
    }
}

sub decode_main {
    $_ = shift;
	# say STDERR "decode_main $_";
    if (ref($_) eq "HASH") {
        my %hash = %$_;
        if ($hash{props}) { # racine du nouveau hash 2017
			# et encore après ça...
			if ($str =~ /^result:/) {
				# say STDERR "dans recherche, hash : ",Dumper(%hash); # $hash{pageProps};
				foreach (@{$hash{props}{pageProps}{initialPage}{zones}}) {
					decode_prg($_);
				}
				return;
			}
			# non mais sans déconner, on se demande bien d'où vient se
			# HOME_fr_{} à la con ???
			my $code = $hash{pages}{currentCode};
			# say STDERR "decode_main: code $code";
			# say STDERR "hash ",Dumper(%hash);
            return decode_type($hash{pages}{list}{"$code"}{zones}) if ($code);
            return decode_type($hash{props}{pageProps}{props}{page}{value}{zones});
        } else {
            die "decode_main: pas de tvguide : ".Dumper($_);
        }
    }
    die "decode_main: pas de hash ?";
}

sub decode_html {
	my ($code,$url0) = @_;
	say STDERR "decode_html code $code url $url0";
	my $json;
	# say STDERR "decode_html: myget pour $code.html $url0";
	my $html = myget($url0,"cache/arte/$code.html",7);
# on récupère l'url de l'iframe video...
	my ($json) = $html =~ /application\/json">({.+})<\//;
	if ($json) {
		eval  {
			$json = decode_json( $json);
		};
		if ($@) {
			die "arte: couille dans le potage au niveau json $?:$@\n";
		}
		# say "decode_html: got json ",Dumper($json);
		return $json->{props}{pageProps}{props}{page}{value}{zones};
	}

	my ($url) = $html =~ /iframe allow.+?src="(.+?)"/;
	if (!$url) {
		($url) = $html =~ /iframe title.+?src=\\"(.+?)\\"/ if (!$url); # alternative...
		$url =~ s/\\\//\//g;
		$url =~ s/%(..)/chr(hex($1))/ge;
		$url =~ s/\\u(....)/chr(hex($1))/ge;
	}
	if (!$url) {
		# nouveau type de player sans iframe, avec directement le json dans
		# la page...
		my ($json_url) = $html =~ /json_url=(.+?)"/;
		if ($json_url) {
			$json_url =~ s/v2/v1/;
			$json = myget($json_url,"cache/arte/$code.json",7);
		}
	}
	if (!$url && !$json) {
		# dans ce cas là, c'est une page d'index probablement
		if ($html =~ /__INITIAL_STATE__ = (.+);/) {
			$json = $1; # decode_entities($1);
			eval  {
				$json = decode_json( $json);
			};
			if ($@) {
				die "arte: couille dans le potage au niveau json $?:$@\n";
			}
		} else {
			die "pas trouvé le json cache cache/arte/$code.html";
		}
		say "encoding: latin1";
		say "list";
		if ($json->{collection}{videos}) {
			decode_prg($json->{collection}{videos});
		} else {
			decode_main($json);
		}
		exit(0);
	}
	my $player;
	if ($url) {
		my $player = myget($url,"cache/arte/$code.player",7) if (!$json);
		($json) = $player =~ /js_json = (.+?);/ if (!$json);
	}
	if (!$json) {
		my ($json_url) = $player =~ /json_url=(.+?)&amp/;
		$json_url =~ s/%(..)/chr(hex($1))/eg;
		$json_url =~ s/api-internal/api/;
		if ($json_url) {
			$json = myget($json_url,"cache/arte/$code.json",7);
		}
	}

	eval {
		$json = decode_json($json);
	};
	if ($@) {
		say STDERR "decode_json a foiré sur $json erreur $! player dans cache cache/arte/$code.player url $url";
		($json) = $player =~ /js_json = (.+?);/;
		say STDERR "contenu json foireux : $json";
	}
	$json->{videoJsonPlayer}{VSR};
}

if ($arg[$#arg] =~ /vid:(.+)/ || $arg[0] =~ /vid:(.+)/) {
# On demande une vidéo !
    my $code = $1;
    my $url0;
    ($code,$url0) = split(/,/,$code);
    $url0 =~ s/\|/\//g;
    if (open(F,">cache/arte/last_serv")) {
        print F $str;
        close(F);
    }
	my ($url,$streams,$json,$hash);
	if ($code =~ /\d/ && $code !~ /^RC/) { # un code normal contient un nombre
		$url = "https://api.arte.tv/api/player/v2/config/fr/$code";
		$streams = myget($url,"cache/arte/$code",7);
		$json = decode_json($streams);
		$hash = $json->{data}{attributes}{streams};
		say STDERR "got json ",Dumper($json);
	}
	say "encoding: latin1"; # c'est toujours du json...
    if ((!$hash || ref($hash) ne "HASH") && !$json) {
# 1 on récupère la page html liée
		say STDERR "case no hash";
		$hash = decode_html($code,$url0);
		# A priori ces pages html sont des indexes
		say "list";
    } else {
		say STDERR "hash $hash ref ",ref($hash);
		say "direct";
	}
	$url = undef;
	handle_hash($hash,$code);
    exit(0);
} elsif ($str =~ /^get,(.+)/) {
    my $url = $1;
    my ($file) = $url =~ /.+\/(.+?)$/;
    $file = "cache/arte/$file";
    print STDERR "arte: file $file from url $url\n";
    link_get::link_get($file,$url);
}

my $page;
if ($str =~ /^result:(.+)/) {
	my $url = "http://www.arte.tv/fr/search/?q=$1";
	$page = myget($url);
} elsif ($str =~ /^concerts/) {
	$page = myget("https://www.arte.tv/fr/videos/arte-concert/","cache/arte/concert0",1/12.0);
} elsif ($str =~ /^Guide/) {
	$page = myget("https://www.arte.tv/fr/guide/","cache/arte/guide",1/12.0);
} else {
	$page = myget("https://www.arte.tv/fr/","cache/arte/j0",1/12.0);
}
# l'encoding doit être après le myget parce que si l'html est en utf8, le
# json est en latin !!!
say "encoding: latin1";
say "list";
say "Recherche\nRecherche";
say "Concerts\nconcerts";
say "Guide\nGuide";
my $capture = 0;
my $json;
# le json dans de l'html c'est toujours merdique, ça vient de changer en
# avril 2017... !
foreach (split(/\n/,$page)) {
    if (/({"props":.+})/) {
        $json = decode_entities($1);
    }
}
eval  {
    $json = decode_json( $json);
};
if ($@) {
    print STDERR "arte: couille dans le potage au niveau json $?:$@, json: $json\n";
    exit(0);
}
# say STDERR Dumper($json);
decode_main($json);
