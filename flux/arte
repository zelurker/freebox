#!/usr/bin/perl

use Cpanel::JSON::XS qw(decode_json);
use HTML::Entities;
use strict;
use link_get;
require "http.pl";
use v5.10;
use Data::Dumper;

# binmode STDOUT,":utf8";
my $str = shift @ARGV;
my @arg = split(/\//,$str);
my $utf = $ENV{LANG} =~ /utf/i;

sub decode_prg {
    $_ = shift;
    if (ref($_) eq "ARRAY") {
        foreach (@$_) {
            if ($_->{programId}) {
                say $_->{title},($_->{subtitle} ? " - ".$_->{subtitle} : "");
                my $url = $_->{url};
				$url = "http://www.arte.tv$url" if ($url !~ /^http/);
                $url =~ s/\//|/g; # pour que l'url puisse être passée en argument, on a pas le droit au /
				say "$str/vid:$_->{programId},$url";
            } # note : certains programmes genre vod n'ont pas de programid, on affiche donc pas
        }
    } else {
        die "deocde_prg: pas de tableau ?";
    }
}

sub decode_type {
# décodage catégorie
    $_ = shift;
	my $base = 0;
	$base = 1 if ($arg[0] =~ /^vid:/);
	$str .= "/" if ($str);
    if (ref($_) eq "ARRAY") {
        foreach (@$_) {
            if ($_->{type}) { # catégories de vidéos
                if (!$arg[$base] && $_->{title}) {
# Note : y a des entrées sans titre avec comme type "banner", mais y en a
# plusieurs. Je suppose que c'est lié aux vidéos
# affichées dans la bannière de haut d'écran, on laisse
# tomber à priori...
                    print $_->{title}."\n$str$_->{code}\n";
                } elsif ($_->{code} eq $arg[$base]) {
					my ($code,$url);
					if ($_->{link}{url}) {
						$url = $_->{link}{url};
						$code = $_->{link}{page};
						$url =~ s:/:|:g;
					}
                    decode_prg($_->{data});
					if ($url) {
						say "Plus...";
						say "+vid:$code,$url";
					}
                }
            } else {
                die "deocde_type: reconnais pas ça : ".Dumper($_);
            }
        }
    } else {
        die "decode_type: pas de tableau ?";
    }
}

sub decode_main {
    $_ = shift;
    if (ref($_) eq "HASH") {
        my %hash = %$_;
        if ($hash{pages}) { # racine du nouveau hash 2017
			# et encore après ça...
			if ($str =~ /^result:/) {
				return decode_prg($hash{search}{teasers});
			}
			# non mais sans déconner, on se demande bien d'où vient se
			# HOME_fr_{} à la con ???
            return decode_type($hash{pages}{list}{"HOME_fr_{}"}{zones});
        } else {
            die "decode_main: pas de tvguide : ".Dumper($_);
        }
    }
    die "decode_main: pas de hash ?";
}

sub decode_html {
	my ($code,$url0) = @_;
	my $json;
	my $html = myget($url0,"cache/arte/$code.html",7);
# on récupère l'url de l'iframe video...
	my ($url) = $html =~ /iframe allow.+?src="(.+?)"/;
	if (!$url) {
		# dans ce cas là, c'est une page d'index probablement
		if ($html =~ /__INITIAL_STATE__ = (.+);/) {
			$json = decode_entities($1);
			eval  {
				$json = decode_json( $json);
			};
			if ($@) {
				die "arte: couille dans le potage au niveau json $?:$@\n";
			}
		} else {
			die "pas trouvé le json cache cache/arte/$code.html";
		}
		say "encoding: latin1";
		say "list";
		if ($json->{collection}{videos}) {
			decode_prg($json->{collection}{videos});
		} else {
			decode_main($json);
		}
		exit(0);
	}
	my $player = myget($url,"cache/arte/$code.player",7);
	($json) = $player =~ /js_json = (.+?);/;
	$json = decode_json($json);
	$json->{videoJsonPlayer}{VSR};
}

if ($arg[$#arg] =~ /vid:(.+)/ || $arg[0] =~ /vid:(.+)/) {
# On demande une vidéo !
    my $code = $1;
    my $url0;
    ($code,$url0) = split(/,/,$code);
    $url0 =~ s/\|/\//g;
    if (open(F,">cache/arte/last_serv")) {
        print F $str;
        close(F);
    }
	my ($url,$streams,$json,$hash);
	if ($code =~ /\d/) { # un code normal contient un nombre
		$url = "https://api.arte.tv/api/player/v1/config/fr/$code?platform=ARTEPLUS7&lang=fr_FR";
		$streams = myget($url,"cache/arte/$code",7);
		$json = decode_json($streams);
		$hash = $json->{videoJsonPlayer}{VSR};
	}
    if (!$hash || ref($hash) ne "HASH") {
# 1 on récupère la page html liée
		$hash = decode_html($code,$url0);
    }
	say "encoding: latin1"; # c'est toujours du json...
    print "direct\n";
	# say STDERR "dumper : ".Dumper($hash);
	my $count = 0;
	$url = undef;
    foreach (sort { $a cmp $b } keys %$hash) {
        my $h = $hash->{$_};
		# next if ($h->{mediaType} eq "hls"); # hls c'est du m3u, on en veut pas!
		if ($h->{mediaType} ne "hls") {
			$count++;
			print "$h->{mediaType} $h->{width}x$h->{height} @ $h->{bitrate}kbps $h->{versionLibelle}\n";
			if ($h->{streamer}) {
				print "get,$h->{streamer}$h->{url}\n";
			} else {
				print "get,$h->{url}\n";
			}
		} else {
			if ($h->{streamer}) {
				$url = $h->{streamer}.$h->{url};
			} else {
				$url = $h->{url};
			}
		}
    }
	if ($count == 0 && $url) {
		# On a une url m3u et rien d'autre, ça semble ête la mode en 2018 !
		my $m3u = myget($url,"cache/arte/$code.m3u",7);
		$count = 0;
		foreach (split /\n/,$m3u) {
			next if (/^#EXTM3U/);
#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=128000,CODECS="mp4a.40.2"
			if (/^#EXT.X.STREAM.INF.*BANDWIDTH=(\d+),RESOLUTION=(.+?),CODECS="(.+?)"/) {
				say "$2 ".($1/1000)."kbps codecs:$3";
				next;
			} elsif (/^#EXT.X.STREAM.INF.*BANDWIDTH=(\d+),CODECS="(.+?)"/) {
				say "audio only: ".($1/1000)."kbps codecs:$2";
				next;
			} elsif (/^http/) {
				$count++;
				if (/\.m3u/) {
					my $m3u = myget($_,"cache/arte/$code.m3u$count",7);
					# du m3u dans du m3u, non mais là ils utilisent un truc
					# qui en génère en masse c'est clair, ça sent le machin
					# apple ça... !
					# bon alors apparemment y a des urls à la suite avec
					# toutes la même légende mais un numéro de segment
					# différent. Je suppose que c'est leur pseudo méthode
					# pour reprendre un flux + loin... bah on va garder que
					# la 1ère url pour l'instant...
					foreach (split /\n/,$m3u) {
						next if (/^#/);
						if (/^http/) {
							say "get,$_";
							last;
						}
					}
				} else {
					say "get,$_";
				}
			} elsif ($_ ne "") {
				say STDERR "m3u: ligne non reconnue : $_.";
			}
		}
	}
    exit(0);
} elsif ($str =~ /^get,(.+)/) {
    my $url = $1;
    my ($file) = $url =~ /.+\/(.+?)$/;
    $file = "cache/arte/$file";
    print STDERR "arte: file $file from url $url\n";
    link_get::link_get($file,$url);
}

my $page;
if ($str =~ /^result:(.+)/) {
	my $url = "http://www.arte.tv/fr/search/?q=$1";
	$page = myget($url);
} else {
	$page = myget("https://www.arte.tv/fr/","cache/arte/j0",1/24.0);
}
# l'encoding doit être après le myget parce que si l'html est en utf8, le
# json est en latin !!!
say "encoding: latin1";
say "list";
say "Recherche\nRecherche";
my $capture = 0;
my $json;
# le json dans de l'html c'est toujours merdique, ça vient de changer en
# avril 2017... !
foreach (split(/\n/,$page)) {
    if (/__INITIAL_STATE__ = (.+);/) {
        $json = decode_entities($1);
    }
}
eval  {
    $json = decode_json( $json);
};
if ($@) {
    print STDERR "arte: couille dans le potage au niveau json $?:$@, json: $json\n";
    exit(0);
}
decode_main($json);
