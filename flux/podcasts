#!/usr/bin/perl

use strict;
use Date::Parse;
# xml::simple est vraiment obligatoire ici, format xml trop variable
use XML::Simple;
use Data::Dumper;
use WWW::Mechanize;
use HTML::Entities;
use POSIX qw(:sys_wait_h );

# Refonte complète, on abandonne podcasters qui est pourri finalement
# et on ne va garder que des résultats google pour les recherches...
#
# C'est un peu long pour un plugin mais c'est + simple que celui de youtube
# (jusqu'ici en tous cas !). En gros :
# 1ère partie : détection du type de requête à faire, exactement comme
# youtube, mais faire un module pour ça ne serait pas très pratique
# 2 - décodage du xml des podcasts avec xml::simple

our $latin = ($ENV{LANG} !~ /UTF/i);
my $f;
my @abo;
my $fpod = "$ENV{HOME}/.freebox/podcasts";
if (open($f,"<$fpod")) {
	@abo = <$f>;
	close($f);
	chomp @abo;
}
my $str = shift @ARGV;
my $debug = 0; # infos
my $dump = 0;  # dump toute l'entrée ligne par ligne
$str =~ s/^result\://;
if ($str =~ /^(.+) (http.+)/) { # demande d'abonnement
	my $title = $1;
	$str = $2;
	push @abo,$title;
	push @abo,$2;
	if (open($f,">$fpod")) {
		print $f join("\n",@abo);
		close($f);
	}
	exit(0);
} elsif ($str eq "Abonnements") {
	header("list");
	print join("\n",@abo);
	exit(0);
} elsif ($str =~ s/^get,(\d+):(.+)/$2/) {
	# Lien download
	my $size = $1;
	mkdir "podcasts";
	my ($file) = $str =~ /.+\/(.+)/;
	$file = "podcasts/$file";
	if (!-f "$file" || -s $file != $size) {
		print STDERR "lien get: taille != $size\n";
		$SIG{CHLD} = \&REAPER;
		my $pid = fork();
		if (!$pid) {
			# Génération du fichier info
			# pas terrible de relire pod ici, mais je ne vois pas d'autre moyen
			# à priori...
			if ($latin) {
				open(F,"<:encoding(iso-8859-1)","pod") || die "peut pas lire pod\n";
			} else {
				open(F,"<pod") || die "peut pas lire pod\n";
			}
			@_ = <F>;
			close(F);
			$_ = join("\n",@_);
			my $ref = XMLin($_);
			my $item = $ref->{channel}->{item};
			my $found = 0;
			foreach (@$item) {
				if ($_->{enclosure}->{url} eq $str) {
					print STDERR "génération $file.info\n";
					$found = 1;
					open(F,">$file.info");
					my $img = $ref->{"channel"}->{image}->{url};
					print F ($img ? "pic:$img " : ""),$_->{title},"\n",$_->{"itunes:subtitle"},"\n";
					print F $_->{description},"\n";
					close(F);
					last;
				}
			}
			if (!$found) {
				print STDERR "problem, could not find url in pod file !\n";
			}
			print STDERR "execution wget -q -c -N -O $file $str\n" if ($debug);
			exec("wget","-q","-c","-N","-O",$file,$str);
		} else {
			my $n = 1;
			my $dest = ($file =~ /mp3$/ ? 40*1024 : 7*1024*1024);
			while ($n++ < 10 && -s $file < $dest) {
				sleep(1);
			}
		}
	}
	print "$file\n"; # Renvoie le nom du fichier à list.pl
	exit(0);
}
$str =~ s/ /\+/g;
my $mech = WWW::Mechanize->new();
$mech->agent_alias("Linux Mozilla");
$mech->timeout(10);
$mech->default_header('Accept-Encoding' => scalar HTTP::Message::decodable());
my ($r,$type);
if ($debug && !$str) {
	@_ = <>;
	$_ = join("",@_);
	$str = "http";
	print STDERR "debug mode, input from stdin\n";
} else {
	if ($str =~ /^prog.:(.+)/) {
		$mech->get($1);
	} elsif ($str && $str !~ /^http/) {
		print STDERR "requête de recherche sur $str\n"; # if ($debug);
		$mech->get("https://www.google.fr/");
		$r = $mech->submit_form(
			form_number => 1,
			fields      => {
				q => "podcast $str filetype:xml",
			}
		);
	} elsif ($str) {
		print STDERR "debug: get $str\n" if ($debug);
		$r = $mech->get($str);
	} elsif (!$str) {
		header("list");
		print "Podcasts Radio France\n+prog1:http://www.radiofrance.fr/espace-pro/podcast-radio-france\n";
		exit(0);
	}
	$_ = $mech->content;
	# Apparemment l'apostrophe windows n'est même pas de l'utf8 standard
	# ça provoque un sacré merdier, alors on traque les codes étendus ici...
	for (my $n=1; $n<=length($_); $n++) {
		my $code = ord(substr($_,$n,1));
		if ($code > 255) {
			print STDERR "replace code $code\n";
			if ($code == 8217) {
				substr($_,$n,1) = "'";
			} else {
				substr($_,$n,1) = ".";
			}
		}
	}
	$type = $r->header("content-type") if ($r);
	if ($str =~ /^prog/) {
		header("list");
		if ($str =~ /^prog1/) {
			parse_index_radio_france();
		} elsif ($str =~ /^prog2/) {
			parse_france_inter();
		} elsif ($str =~ /^prog3/) {
			parse_franceinfo();
		}
	}
}

my $encoding = "";

my $content = 0;
my ($link,$title,$desc,$img,$date);
print STDERR "*** type $type\n";
if (/^<\?xml/ || /^<rss xml/ || $type =~ /(application|text).xml/) {
	header("direct");
	# Sauver le fichier pour l'information programmes (prog/podcasts.pm)
	# Normalement LWP détecte tout seul l'encodage des caractères et fait la
	# conversion (en fonction de la locale ou prend en default latin1 ?)
	# Sauf que des fois le serveur en face n'envoie pas de header avec l'
	# encodage et dans ce cas là la détection foire, et là on se retrouve
	# avec un fichier utf8 alors que normalement il est latin1.
	# On ne peut pas avoir de changement à ce niveau là, un xml est toujours
	# en utf8 sinon le parser foire, donc on sauve en désactivant explicitement
	# le décodage pour éviter tout problème.
	if ($r && open(F,">pod")) {
		print F $_;
		close(F);
	}
	s/\xe2\x80\x99/'/gs;
	s/(&[^a])/&amp;/g;
	print STDERR "décodage xml\n" if ($debug);
	# fichier xml podcast
	my $found = 0;
	foreach (@abo) {
		if ($_ eq $str) {
			$found = 1;
			last;
		}
	}
	print STDERR "trouvé abonnement\n" if ($found && $debug);

	s/\r//gm;
	my $ref = XMLin($_);
	if (!$found) {
		my $title = decode_entities($ref->{channel}->{title});
		print "S'abonner\n$title $str\n";
	}

	my $item = $ref->{channel}->{item};
	# Vu que certains podcasts n'arrivent pas dans l'ordre, trie par date
	my @item = sort { my $c = $a->{pubDate}; my $d = $b->{pubDate};
	# print "avant $c et $d\n";
	if ($c !~ /^\d+$/) {
		$c =~ s/Mars/Mar/;
		$d =~ s/Mars/Mar/;
		$c = str2time($c);
		$d = str2time($d);
	}
	# print "tri $c et $d\n";
	$d <=> $c;
	} @$item;
	foreach (@item) {
		# A priori ça ne semble pas être une bonne idée de coller l'image ici
		# j'ai jamais vu ces images changer pour chaque épisode et généralement
		# elles sont assez grosses donc elles seront mieux dans le bandeau
		# d'info. Je laisse quand même le code en commentaire au cas où...
		# my $img = $_->{"media:thumbnail"}->{url};
		# print "pic:$img " if ($img && $nb++ <= 10);
		print $_->{title};
		my $date = $_->{pubDate};
		$date = str2time($date) if ($date !~ /^\d+$/);
		print " le ".get_date($date) if ($date);
		print "\nget,",$_->{enclosure}->{length},":",$_->{enclosure}->{url},"\n";
	}
	exit(0);
}

# Ici on interprête le résultat de la recherche...
header("list");
my $u = $mech->uri;
if ($u =~ /google\./) {
	foreach ($mech->links) {
		my $u = $_->url;
		if ($u =~ /url.q=(http.+?)&/) {
			$u = $1;
			print $_->text,"\n$u\n";
		}
	}
} else {
	my ($host) = $u =~ /https?:\/\/(.+?)\//;
	print STDERR "host for filtering $host\n";
	foreach ($mech->links) {
		my $u = $_->url;
		next if ($u =~ /$host/);
		next if ($u !~ /^http/ || $u !~ /xml$/);
		print $_->text,"\n$u\n";
	}
}

sub get_date {
	my $time = shift;
	my ($sec,$min,$hour,$mday,$mon,$year) = localtime($time);
	sprintf("%d/%02d/%02d, %02d:%02d",$mday,$mon+1,$year+1900,$hour,$min);
}

sub parse_index_radio_france {
	s/\r//g;
	s/\n//g;
	while (s/^.+?<a title="([^"]+)" href="(http[^"]+)" target="_blank"><img class="img-float-left" src="([^"]+)"//) {
		my ($text,$url,$pic) = ($1,$2,$3);
		my $prg;
		if ($url =~ /franceinter/) {
			$prg = "prog2";
		} elsif ($url =~ /franceinfo/) {
			$prg = "prog3";
		}
		print "pic:http://www.radiofrance.fr$pic $text\n+$prg:$url\n" if ($prg);
	}
	exit(0);
}

sub parse_france_inter {
	s/\r//g;
	s/\n//g;
	while (s/^.*?<div class="index">(.+?)<div class="index"/<div class="index"/) {
		my $cont = $1;
		$cont =~ s/([\dh]+)//;
		my $heure = $1;
		$cont =~ s/<img src="(.+?)" alt="(.+?)"//;
		my $leg = "pic:$1 $heure : $2";
		if ($cont =~ s/<a href="(http[^"]+?)" title="Abonnement par RSS"//) {
			print "$leg\n$1\n";
		}
	}
	exit(0);
}

sub parse_franceinfo {
	s/\r//g;
	s/\n//g;
	while (s/^.*?<li class="views-row(.+?)<li class="views-row/<div class="views-row/) {
		my $cont = $1;
		my $leg;
		if ($cont =~ s/<img src="([^"]+)"//) {
			$leg = "pic:$1 ";
		} else {
			last;
		}
		$cont =~ s/<a href=".+?">(.+?)<\/a>//;
		$leg .= "$1";
		if ($cont =~ s/<input type="text" id="rss-link" class="[^"]+" value="(.+?)"//) {
			print "$leg\n$1\n";
		}
	}
	exit(0);
}

sub header {
	my $msg = shift;
	print "$msg\n";
	print "Recherche\nRecherche\n"; # Transmis en mode list (ne contient pas //)
	print "Abonnements\n+Abonnements\n" if (@abo);
}

sub REAPER {
	my $child;
	$SIG{CHLD} = \&REAPER;
	while (($child = waitpid(-1,WNOHANG)) > 0) {
	}
}

