#!/usr/bin/perl

use Date::Parse;
# xml::simple est vraiment obligatoire ici, format xml trop variable
use XML::Simple;
use Data::Dumper;
use WWW::Mechanize;
use HTML::Entities;
use link_get;
use search;
use Cpanel::JSON::XS qw(decode_json);
use strict;
use v5.10; # script en utf8, common::sense est utf8 seulement
use myutf;

# Refonte complète, on abandonne podcasters qui est pourri finalement
# et on ne va garder que des résultats google pour les recherches...
#
# C'est un peu long pour un plugin mais c'est + simple que celui de youtube
# (jusqu'ici en tous cas !). En gros :
# 1ère partie : détection du type de requête à faire, exactement comme
# youtube, mais faire un module pour ça ne serait pas très pratique
# 2 - décodage du xml des podcasts avec xml::simple

our $latin = ($ENV{LANG} !~ /UTF/i);
# if (!$latin) {
# 	binmode(STDOUT, ":utf8");
# 	binmode(STDERR, ":utf8");
# }
my $f;
my @abo;
my $fpod = "$ENV{HOME}/.freebox/podcasts";
if (open($f,"<$fpod")) {
	@abo = <$f>;
	close($f);
	chomp @abo;
}
my $str = shift @ARGV;
if ($str eq "del") {
	my $url = shift @ARGV;
	for (my $n=1; $n <= $#abo; $n++) {
		if ($abo[$n] eq $url) {
			splice @abo,$n-1,2;
			save_pods();
			last;
		}
	}
	exit(0);
}
my $debug = 0; # infos
my $dump = 0;  # dump toute l'entrée ligne par ligne
$str =~ s/^result\://;
my $mech = WWW::Mechanize->new();
$mech->agent_alias("Linux Mozilla");
$mech->timeout(10);
$mech->default_header('Accept-Encoding' => scalar HTTP::Message::decodable());

if ($str =~ /^(.+) (http.+)/) { # demande d'abonnement
	my $title = $1;
	$str = $2;
	push @abo,$title;
	push @abo,$2;
	save_pods();
	exit(0);
} elsif ($str eq "Abonnements") {
	header("list");
	print join("\n",@abo);
	exit(0);
} elsif ($str =~ s/^get,(\d+):(.+)/$2/) {
	# Lien download
	my $size = $1;
	mkdir "podcasts";
	my ($file) = $str =~ /.+\/(.+)/;
	$file =~ s/\?.+//; # Vire tout ce qui suit d'éventuels params !
	$file = "podcasts/$file";

	if ($latin) {
		open(F,"<:encoding(iso-8859-1)","pod") || die "peut pas lire pod\n";
	} else {
		open(F,"<:encoding(utf8)","pod") || die "peut pas lire pod\n";
	}
	# open(F,"<","pod") || die "peut pas lire pod\n";
	@_ = <F>;
	close(F);
	$_ = join("\n",@_);
	if (!/^\\"/) { # json par apple podcast ou google
		my $ref = XMLin($_);
		my $item = $ref->{channel}->{item};
		my $found = 0;
		foreach (@$item) {
			if ($_->{enclosure}->{url} eq $str) {
				print STDERR "génération $file.info\n";
				$found = 1;
				open(F,">$file.info");
				my $img = $ref->{"channel"}->{image}->{url};
				print F ($img ? "pic:$img " : ""),$_->{title},"\n",$_->{"itunes:subtitle"},"\n";
				print F $_->{description},"\n";
				close(F);
				last;
			}
		}
		if (!$found) {
			print STDERR "problem, could not find url in pod file !\n";
		}
	}
	say STDERR "link_get: file $file str $str size $size";
	link_get::link_get($file,$str,$size);
}
$str =~ s/ /\+/g;
my ($r,$type);
if ($debug && !$str) {
	@_ = <>;
	$_ = join("",@_);
	$str = "http";
	print STDERR "debug mode, input from stdin\n";
} else {
	if ($str =~ /^prog.:(.+)/) {
		$mech->get($1);
	} elsif ($str && $str !~ /^http/) {
		print STDERR "requête de recherche sur $str\n"; # if ($debug);
		$str =~ s/\+/ /g;
		$mech = search::search("podcast rss $str");
	} elsif ($str) {
		print STDERR "debug: get $str\n" if ($debug);
		$r = $mech->get($str);
	} elsif (!$str) {
		header("list");
		exit(0);
	}
	$_ = $mech->content(charset => "utf8");
	# Apparemment l'apostrophe windows n'est même pas de l'utf8 standard
	# ça provoque un sacré merdier, alors on traque les codes étendus ici...
	# Note : on ne peut pas utiliser myutf ici, il faut absolument que le
	# texte reste en utf8 pour le parser xml !
	if ($latin) {
		for (my $n=1; $n<=length($_); $n++) {
			my $code = ord(substr($_,$n,1));
			if ($code > 255) {
				if ($code == 8217) {
					substr($_,$n,1) = "'";
				} else {
					substr($_,$n,1) = ".";
				}
			}
		}
	}
	$type = $r->header("content-type") if ($r);
}

my $encoding = "";

my $content = 0;
my ($link,$title,$desc,$img,$date);
print STDERR "*** type $type\n";
if (/"submit" value="Accept all/) {
	# le formulaire de google pour accepter les cookies !
	# Vu qu'on ne gère même pas de cookie jar ici on peut acepter tout ce qu'ils veulent !
	eval {
		$mech->submit("Submit all");
	};
	if ($@) {
		say STDERR "apparemment on a pas trouvé le submit all !";
		say STDERR "erreur : $@ et $!";
		say STDERR "duming to out...";
		open(F,">out");
		print F $_;
		close(F);
		exit(0);
	}
	say STDERR "called submit on accept all";
	$_ = $mech->content(charset => "utf8");
}

if (/^<\?xml/ || /^<rss xml/ || $type =~ /(application|text).xml/) {
	header("direct");
	my $char = chr(8217); # apostrophe ?
	s/$char/\'/g;
	$char = chr(8230); # apostrophe fermé apparemment, merdier windoze
	s/$char/\'/g;
	# Ne surtout pas appeler ici decode_entities, le xml est très strict
	# là-dessus
	if ($r && open(F,">","pod")) {
		print F $_;
		close(F);
	}
	# A priori c'est pas la peine de repasser le & ici...
	# s/&([^a])/&amp;$1/g;
	print STDERR "décodage xml\n" if ($debug);
	# fichier xml podcast
	my $found = 0;
	foreach (@abo) {
		if ($_ eq $str) {
			$found = 1;
			last;
		}
	}
	print STDERR "trouvé abonnement\n" if ($found && $debug);

	s/\r//gm;
	my $ref = XMLin($_);
	if (!$found) {
		my $title = decode_entities($ref->{channel}->{title});
		print "S'abonner\n$title $str\n";
	}

	my $item = $ref->{channel}->{item};
	# Vu que certains podcasts n'arrivent pas dans l'ordre, trie par date
	my @item = sort
	{
		my $c = $a->{pubDate}; my $d = $b->{pubDate};
		# print "avant $c et $d\n";
		if ($c !~ /^\d+$/) {
			$c =~ s/Mars/Mar/;
			$d =~ s/Mars/Mar/;
			$c = str2time($c);
			$d = str2time($d);
		}
		# print "tri $c et $d\n";
		$d <=> $c;
	} @$item;
	binmode STDOUT;
	foreach (@item) {
		# A priori ça ne semble pas être une bonne idée de coller l'image ici
		# j'ai jamais vu ces images changer pour chaque épisode et généralement
		# elles sont assez grosses donc elles seront mieux dans le bandeau
		# d'info. Je laisse quand même le code en commentaire au cas où...
		# my $img = $_->{"media:thumbnail"}->{url};
		# print "pic:$img " if ($img && $nb++ <= 10);
		print decode_entities($_->{title});
		my $date = $_->{pubDate};
		$date = str2time($date) if ($date !~ /^\d+$/);
		print " le ".get_date($date) if ($date);
		print "\nget,",$_->{enclosure}->{length},":",$_->{enclosure}->{url},"\n";
	}
	exit(0);
} elsif (/(\\"episodes\\":{.+?})}}/) {
	say STDERR "trouvé podcast apple";
	my $json = $1;
	my $title;
	if (/({"\@context.+})\n/) {
		my $header = $1;
		($title) = $header =~ /"name":"(.+?)"/;
	}
	header("direct");
	if ($r && open(F,">","pod")) {
		print F $json;
		close(F);
	}
	my $found = 0;
	foreach (@abo) {
		if ($_ eq $str) {
			$found = 1;
			last;
		}
	}
	print STDERR "trouvé abonnement\n" if ($found && $debug);
	if (!$found) {
		print "S'abonner\n$title $str\n";
	}
	$json =~ s/\\"/"/g;
	$json =~ s/\\"/"/g;
	myutf::mydecode(\$json); # l'arme absolue anti "wide character"
	$json = "{$json}}}";
	eval {
		$json = decode_json($json);
	};
	if ($@) {
		say STDERR "podcast: erreur in decode_json : $@";
		open(F,">json");
		print F $json;
		close(F);
		say STDERR "json sauvé";
		if ($@ =~ /offset (\d+)/) {
			say STDERR "json offset $1, trying left side then...";
			$json = substr($json,0,$1);
			eval {
				$json = decode_json($json);
			};
			if ($@) {
				say STDERR "ça foire encore : $@";
			}
		}
		exit(0) if ($@);
	}
	foreach (@{$json->{episodes}->{data}}) {
		say $_->{attributes}->{name};
		say "get,0:",$_->{attributes}->{assetUrl};
	}
	exit(0);
} elsif (/data:(\[null.+?\]), side/) {
	say STDERR "google podcasts found";
	my $found = 0;
	header("direct");
	my $json = $1;
	myutf::mydecode(\$json);
	$json = decode_json($json);
	# say Dumper($json);
	my $title = $json->[1][0][0][1];
	my $url_xml = $json->[1][0][0][4][1];
	foreach (@abo) {
		if ($_ eq $str) {
			$found = 1;
			last;
		}
	}
	print STDERR "trouvé abonnement\n" if ($found && $debug);
	if (!$found) {
		print "S'abonner\n$title $str\n";
	}
	foreach (@{$json->[1][0]}) {
		say $_->[8];
		say $_->[13];
	}
	exit(0);
}

say STDERR "unknown html, dumping to out";
open(F,">out");
print F $_;
close(F);
# Ici on interprête le résultat de la recherche...
header("list");
my $u = $mech->uri;
if ($u =~ /google\./) {
	foreach ($mech->links) {
		my $u = $_->url;
		if ($u =~ /url.q=(http.+?)&/) {
			$u = $1;
			print $_->text,"\n$u\n";
		}
	}
} elsif ($u =~ /duckduckgo/) {
	foreach ($mech->links) {
		my $u = $_->url;
		next if ($u !~ /^http/ || $_->text =~ /^ *$/);
		say STDERR "*duck: ",$_->text,"\n$u";
		print $_->text,"\n$u\n";
	}
} else {
	my ($host) = $u =~ /https?:\/\/(.+?)\//;
	print STDERR "host for filtering $host\n";
	foreach ($mech->links) {
		my $u = $_->url;
		next if ($u !~ /^http/ || $_->text =~ /^ *$/);
		print $_->text,"\n$u\n";
	}
}

sub get_date {
	my $time = shift;
	my ($sec,$min,$hour,$mday,$mon,$year) = localtime($time);
	sprintf("%d/%02d/%02d, %02d:%02d",$mday,$mon+1,$year+1900,$hour,$min);
}

sub header {
	my $msg = shift;
	say "encoding: latin1";
	print "$msg\n";
	print "Recherche\nRecherche\n"; # Transmis en mode list (ne contient pas //)
	print "Consulter une url xml...\nRecherche:url podcast xml\n"; # Transmis en mode list (ne contient pas //)
	print "Abonnements\n+Abonnements\n" if (@abo);
}

sub save_pods {
	if (open($f,">$fpod")) {
		print $f join("\n",@abo);
		close($f);
	}
}
